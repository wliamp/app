description: |
  - Detects and commits any updates to README and docker-compose files, then opens a Pull Request.
  - Mirrors the latest deployment artifacts into a dedicated deployment repository.

inputs:
  pat:
    required: true
    description: "GitHub Personal Access Token (PAT) used for authentication with GitHub CLI when creating Pull Requests."
  key:
    required: true
    description: "SSH Deploy Key granting write access to the external deployment repository."

runs:
  using: composite
  steps:
    # =============================================================
    # Step 1: Detect and push README/Compose changes
    #
    # - Creates a new temporary branch for settings or Compose updates.
    # - Configures a bot identity for automated commits.
    # - Commits README.md and docker-compose.yml only if changes are detected.
    # - Pushes the branch and opens a Pull Request targeting 'main'.
    # - Avoids duplication if a similar PR already exists.
    # =============================================================
    - name: üíæ Commit README & Compose
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.pat }}
      run: |
        set -euo pipefail
        branch="auto/settings-$(date +%s)"
        git config user.name "settings[bot]"
        git config user.email "settings[bot]@users.noreply.github.com"
        git checkout -b "$branch"
        git add README.md docker-compose.yml
        git diff --cached --quiet && echo "No changes to commit" && exit 0
        git commit -m "chore(root): sync Gradle structure + Compose artifacts"
        git push origin "$branch"
        gh pr create \
          --title "chore(root): sync Gradle structure" \
          --body "Auto-sync based on settings.gradle." \
          --base main \
          --head "$branch" || echo "PR already exists"

    # =============================================================
    # Step 2: Sync deployment artifacts to external Deploy repo
    #
    # - Authenticates via SSH Deploy Key to access 'java-deployment' repository.
    # - Clones the repo into a temporary workspace.
    # - Iterates through all folders under ./deploy in the source repository.
    # - Replaces corresponding folders in the Deploy repo with updated artifacts.
    # - Commits only if actual changes exist, avoiding redundant commits.
    # - Pushes updates directly to the 'main' branch of the Deploy repository.
    # =============================================================
    - name: üì¶ Commit & Push to Deploy repo
      shell: bash
      run: |
        set -euo pipefail
        echo "üöÄ Syncing deployment artifacts..."
        mkdir -p ~/.ssh
        echo "${{ inputs.key }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts 2>/dev/null
        DEPLOY_DIR="${{ runner.temp }}/java-deployment"
        git clone --depth=1 git@github.com:wliamp/java-deployment.git "$DEPLOY_DIR"
        cd "$DEPLOY_DIR"
        FOLDERS=()
        for d in "$GITHUB_WORKSPACE/deploy"/*/; do
          [ -d "$d" ] || continue
          FOLDERS+=("$(basename "$d")")
        done
        for folder in "${FOLDERS[@]}"; do
          SRC="${GITHUB_WORKSPACE}/deploy/$folder"
          if [ -d "$SRC" ]; then
            echo "üì¶ Syncing $folder..."
            rm -rf "$folder"
            mkdir -p "$folder"
            cp -r "$SRC"/* "$folder"/ || echo "‚ö†Ô∏è No files in $SRC"
          fi
        done
        git config user.name "settings[bot]"
        git config user.email "settings[bot]@users.noreply.github.com"
        git add -A
        git diff --cached --quiet || git commit -m "chore: sync deployment artifacts"
        git push origin main
