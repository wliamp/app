description: |
  - Auto-branching from dev branch
  - Semantic versioning
  - Docker reproducible build
  - Security scan
  - Manual approval
  - Reporting

inputs:
  module:
    description: "Module / Microservice in monorepo"
    required: true
  version:
    description: "Target semantic version"
    required: true
  image:
    description: "Docker Image name"
    required: true

runs:
  using: composite
  steps:
    # ==========================================================
    # üß≠ STEP 1: Checkout repository
    # Retrieves the repository code for branching and building operations.
    # ==========================================================
    - name: üß© Checkout Source Code
      uses: actions/checkout@v4

    # ==========================================================
    # üßæ STEP 2: Validate version format
    # Ensures the provided version follows semantic versioning (X.Y.Z).
    # ==========================================================
    - name: üîç Validate Semantic Version
      shell: bash
      run: |
        if [[ ! "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid version format: ${{ inputs.version }}"
          exit 1
        fi
        echo "‚úÖ Version format OK: ${{ inputs.version }}"

    # ==========================================================
    # üåø STEP 3: Auto-create release branch
    # Checks if a release branch already exists. If not, creates a new branch
    # from the dev branch using the naming convention:
    #     release/<module>-<version>
    # ==========================================================
    - name: üåø Create Release Branch
      id: branch
      shell: bash
      run: |
        BRANCH="release/${{ inputs.module }}-${{ inputs.version }}"
        mkdir -p .release-log
        LOG=".release-log/branch-check.log"
        echo "üîç Checking if branch '$BRANCH' exists on remote..." | tee -a "$LOG"
        git fetch origin --quiet
        if git ls-remote --exit-code --heads origin "$BRANCH" >/dev/null 2>&1; then
          echo "‚ùå Branch already exists: $BRANCH" | tee -a "$LOG"
          echo "exists=true" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "üÜï Branch does not exist. Creating new branch: $BRANCH" | tee -a "$LOG"
          git checkout -B dev origin/dev
          git checkout -b "$BRANCH"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        echo "üìù Release branch created for ${{ inputs.module }} ${{ inputs.version }}" | tee -a "$LOG"
        git push origin "$BRANCH"

    # ==========================================================
    # üê≥ STEP 4: Build Docker image
    # Builds the Docker image for the target module with caching enabled.
    # Produces a deterministic tag: ghcr.io/<owner>/<image>:<version>.
    # ==========================================================
    - name: üèóÔ∏è Build Docker Image
      if: success()
      shell: bash
      run: |
        IMAGE="ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}:${{ inputs.version }}"
        docker build \
          --cache-from="$IMAGE" \
          -t "$IMAGE" \
          -f ${{ inputs.module }}/Dockerfile \
          ${{ inputs.module }}
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV

    # ==========================================================
    # üß¨ STEP 5: Verify reproducible build
    # Rebuilds the same Docker image twice and compares their SHA IDs.
    # Ensures build reproducibility and consistency across environments.
    # ==========================================================
    - name: üß™ Verify Reproducibility
      if: success()
      shell: bash
      run: |
        HASH1=$(docker inspect --format='{{.Id}}' "$IMAGE")
        docker build \
          -t "$IMAGE-test" \
          -f ${{ inputs.module }}/Dockerfile \
          ${{ inputs.module }}
        HASH2=$(docker inspect --format='{{.Id}}' "$IMAGE-test")
        if [[ "$HASH1" != "$HASH2" ]]; then
          echo "‚ùå Non-deterministic build detected!"
          exit 1
        fi
        echo "‚úÖ Reproducible build confirmed"

    # ==========================================================
    # üß∞ STEP 6: Initialize CodeQL (SAST)
    # Sets up GitHub CodeQL for static application security testing.
    # ==========================================================
    - name: üß∞ Initialize CodeQL
      if: success()
      uses: github/codeql-action/init@v3
      with:
        languages: java

    # ==========================================================
    # üß™ STEP 7: Run CodeQL analysis
    # Executes static analysis to identify vulnerabilities in source code.
    # ==========================================================
    - name: üî¨ Analyze with CodeQL
      if: success()
      uses: github/codeql-action/analyze@v3

    # ==========================================================
    # üõ°Ô∏è STEP 8: Container vulnerability scan
    # Scans the built Docker image using Trivy to detect OS and library issues.
    # The pipeline fails on HIGH or CRITICAL findings.
    # ==========================================================
    - name: üõ°Ô∏è Scan Docker Image (Trivy)
      if: success()
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ env.IMAGE }}
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        exit-code: 1

    # ==========================================================
    # üìä STEP 9: Upload release log artifacts
    # Publishes the release logs and branching info as a downloadable artifact
    # for manual review and audit tracking.
    # ==========================================================
    - name: üì§ Upload Release Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: release-report-${{ inputs.module }}-${{ inputs.version }}
        path: .release-log/
