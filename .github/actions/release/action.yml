description: |
  - Docker image build and tagging
  - Image push to target registry
  - Security scan using Trivy
  - Report generation and artifact upload
  - Notification for release completion
inputs:
  scope:
    description: "Java Spring Boot independent application"
    required: true
  service:
    description: "A Service belong to Scope"
  version:
    required: true
    description: "Docker Image version"
  docker_user:
    required: true
    description: "Username or service account used to authenticate to the Docker registry."
  docker_token:
    required: true
    description: "Access token or password used for Docker registry authentication."
  docker_repo:
    required: true
    description: "Target Docker registry repository or namespace to push the built image."
  slack:
    required: true
    description: "Incoming Slack Webhook URL used to send release status notifications."
  telegram_token:
    required: false
    description: "Telegram bot token used for sending notifications."
  telegram:
    required: false
    description: "Telegram chat/group ID to send messages to."
  discord:
    required: false
    description: "Discord webhook URL to send notifications."
  pat:
    required: false
    description: "GitHub Personal Access Token used for repository_dispatch events."
runs:
  using: composite
  steps:
    - run: |
        IMAGE_NAME="docker.io/${{ inputs.docker_repo }}/${{ inputs.scope }}-${{ inputs.service }}:${{ inputs.version }}"
        SCOPE="${{ inputs.scope }}"
        SERVICE="${{ inputs.service }}"
        echo "üèóÔ∏è Building Docker image: $IMAGE_NAME"
        echo "üì¶ scope: $SCOPE | service: $SERVICE"
        docker build \
          -t "$IMAGE_NAME" \
          -f ".docker/Dockerfile" \
          --build-arg SCOPE="$SCOPE" \
          --build-arg SERVICE="$SERVICE" \
          .
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      shell: bash
    - run: |
        echo "${{ inputs.docker_token }}" | docker login -u "${{ inputs.docker_user }}" --password-stdin
        docker push "$IMAGE_NAME"
      shell: bash
    - uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        exit-code: 1
    - run: |
        DIGEST=$(docker images --digests --format "{{.Digest}}" | head -n1 || echo "N/A")
        echo "DIGEST=$DIGEST" >> $GITHUB_ENV
        echo "üßæ release Report" > report.txt
        echo "Status: ${{ job.status }}" >> report.txt
        echo "Image: $IMAGE_NAME" >> report.txt
        echo "Digest: $DIGEST" >> report.txt
        echo "Ref: $GITHUB_REF_NAME" >> report.txt
      if: ${{ always() }}
      shell: bash
    - uses: actions/upload-artifact@v4
      with:
        name: release-report-${{ inputs.scope }}-${{ inputs.service }}-${{ inputs.version }}
        path: report.txt
      if: ${{ always() }}
    - run: |
        STATUS="${{ job.status }}"
        SCOPE="${{ inputs.scope }}"
        SERVICE="${{ inputs.service }}"
        VERSION="${{ inputs.version }}"
        if [ "$STATUS" = "success" ]; then
          MESSAGE="‚úÖ *release completed successfully* for tag: $GITHUB_REF_NAME"
          MESSAGE="$MESSAGE\nüì¶ Image: ${SCOPE}-${SERVICE}:${VERSION}"
          MESSAGE="$MESSAGE\nüîë Digest: ${DIGEST:-N/A}"
        else
          MESSAGE="‚ùå *release failed* for tag: $GITHUB_REF_NAME"
          MESSAGE="$MESSAGE\nüß© scope: ${SCOPE} | service: ${SERVICE}"
        fi
        echo "üîî Sending notifications..."
        curl -X POST -H "Content-Type: application/json" \
          --data "{\"text\":\"$MESSAGE\"}" ${{ inputs.slack }} || true
        curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage" \
          -d "chat_id=${{ inputs.telegram }}" \
          -d "text=$MESSAGE" || true
        curl -X POST \
          -H "Content-Type: application/json" \
          -d "{\"content\":\"$MESSAGE\"}" ${{ inputs.discord }} || true
        if [ "$STATUS" = "success" ]; then
          echo "üöÄ Triggering downstream repository..."
          curl -X POST \
            -H "Authorization: Bearer ${{ inputs.pat }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/wliamp/java-deployment/dispatches \
            -d "{\"event_type\":\"released\",\"client_payload\":{\"scope\":\"${SCOPE}\",\"service\":\"${SERVICE}\",\"version\":\"${VERSION}\"}}"
        else
          echo "‚ö†Ô∏è Job failed, skipping downstream trigger."
        fi
      if: ${{ always() }}
      shell: bash
