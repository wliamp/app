description: |
  - Auto-tagging from dev branch
  - Semantic versioning
  - Ensure Release
  - Docker reproducible build
  - Security scan
  - Manual approval
  - Reporting

inputs:
  image:
    description: "Docker Image repo name"
    required: true
  version:
    description: "Target semantic version"
    required: true

runs:
  using: composite
  steps:
    # ==========================================================
    # 🧭 STEP 1: Checkout repository
    # Retrieves the repository code for tagging and building operations.
    # ==========================================================
    - name: 🧩 Checkout Source Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   # required to create and push tags

    # ==========================================================
    # 🧾 STEP 2: Validate version format
    # Ensures the provided version follows semantic versioning (X.Y.Z).
    # ==========================================================
    - name: 🔍 Validate Semantic Version
      shell: bash
      run: |
        if [[ ! "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format: ${{ inputs.version }}"
          exit 1
        fi
        echo "✅ Version format OK: ${{ inputs.version }}"

    # ==========================================================
    # 🌿 STEP 3: Ensure release branch exists & sync from dev
    # If release/<image> branch doesn't exist, create from dev.
    # If exists, sync latest commits from origin/dev into it.
    # ==========================================================
    - name: 🌿 Ensure & Sync Release Branch
      id: branch
      shell: bash
      run: |
        set -e
        RELEASE_BRANCH="release/${{ inputs.image }}"
        echo "🔍 Checking branch: $RELEASE_BRANCH"
        git fetch origin dev --quiet
        git fetch origin "$RELEASE_BRANCH" --quiet || true
        if git rev-parse --verify "origin/$RELEASE_BRANCH" >/dev/null 2>&1; then
          echo "✅ Found existing branch: $RELEASE_BRANCH"
          git checkout -B "$RELEASE_BRANCH" "origin/$RELEASE_BRANCH"
          echo "🔄 Merging latest dev changes into $RELEASE_BRANCH..."
          git merge --no-edit origin/dev || true
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "📦 Push updated $RELEASE_BRANCH after sync"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git push origin "$RELEASE_BRANCH"
          else
            echo "✅ Release branch already up to date with dev."
          fi
        else
          echo "🆕 Creating new branch: $RELEASE_BRANCH from origin/dev"
          git checkout -b "$RELEASE_BRANCH" origin/dev
          git push origin "$RELEASE_BRANCH"
        fi
        echo "branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT

    # ==========================================================
    # 🏷️ STEP 4: Auto-create Git Tag
    # Automatically creates and pushes a semantic version tag to remote.
    # Used for scheduled or manual releases without human intervention.
    # ==========================================================
    - name: 🏷️ Create Git Tag
      id: tag
      shell: bash
      run: |
        TAG="${{ inputs.version }}"
        BRANCH="${{ steps.branch.outputs.branch }}"
        mkdir -p .release-log
        LOG=".release-log/tag-create.log"
        echo "🔍 Checking if tag '$TAG' exists..." | tee -a "$LOG"
        git fetch origin --tags --quiet
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "❌ Tag already exists: $TAG" | tee -a "$LOG"
          echo "exists=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git checkout "$BRANCH"
        git tag -a "$TAG" -m "Automated release $TAG for ${{ inputs.image }}"
        git push origin "$TAG"
        echo "✅ Created and pushed tag: $TAG on $BRANCH" | tee -a "$LOG"
        echo "exists=false" >> $GITHUB_OUTPUT

    # ==========================================================
    # 🐳 STEP 5: Build Docker image
    # Builds the Docker image for the target module with caching enabled.
    # Produces a deterministic tag: ghcr.io/<owner>/<image>:<version>.
    # ==========================================================
    - name: 🏗️ Build Docker Image
      if: success()
      shell: bash
      run: |
        IMAGE="ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}:${{ inputs.version }}"
        docker build \
          --cache-from="$IMAGE" \
          -t "$IMAGE" \
          -f ${{ inputs.image }}/Dockerfile \
          ${{ inputs.image }}
        echo "IMAGE=$IMAGE" >> $GITHUB_ENV

    # ==========================================================
    # 🧬 STEP 6: Verify reproducible build
    # Rebuilds the same Docker image twice and compares their SHA IDs.
    # Ensures build reproducibility and consistency across environments.
    # ==========================================================
    - name: 🧪 Verify Reproducibility
      if: success()
      shell: bash
      run: |
        HASH1=$(docker inspect --format='{{.Id}}' "$IMAGE")
        docker build \
          -t "$IMAGE-test" \
          -f ${{ inputs.image }}/Dockerfile \
          ${{ inputs.image }}
        HASH2=$(docker inspect --format='{{.Id}}' "$IMAGE-test")
        if [[ "$HASH1" != "$HASH2" ]]; then
          echo "❌ Non-deterministic build detected!"
          exit 1
        fi
        echo "✅ Reproducible build confirmed"

    # ==========================================================
    # 🧰 STEP 7: Initialize CodeQL (SAST)
    # Sets up GitHub CodeQL for static application security testing.
    # ==========================================================
    - name: 🧰 Initialize CodeQL
      if: success()
      uses: github/codeql-action/init@v3
      with:
        languages: java

    # ==========================================================
    # 🧪 STEP 8: Run CodeQL analysis
    # Executes static analysis to identify vulnerabilities in source code.
    # ==========================================================
    - name: 🔬 Analyze with CodeQL
      if: success()
      uses: github/codeql-action/analyze@v3

    # ==========================================================
    # 🛡️ STEP 9: Container vulnerability scan
    # Scans the built Docker image using Trivy to detect OS and library issues.
    # The pipeline fails on HIGH or CRITICAL findings.
    # ==========================================================
    - name: 🛡️ Scan Docker Image (Trivy)
      if: success()
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ env.IMAGE }}
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        exit-code: 1

    # ==========================================================
    # 📊 STEP 10: Upload release log artifacts
    # Publishes the release logs and tagging info as a downloadable artifact
    # for manual review and audit tracking.
    # ==========================================================
    - name: 📤 Upload Release Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: release-report-${{ inputs.image }}-${{ inputs.version }}
        path: .release-log/
