description: |
  - Tag validation (only image-version tags like <image>-X.Y.Z allowed)
  - Docker image build and tagging
  - Image push to target registry
  - Security scan using Trivy
  - Report generation and artifact upload
  - Slack notification for delivery completion

inputs:
  docker_user:
    required: true
    description: "Username or service account used to authenticate to the Docker registry."
  docker_token:
    required: true
    description: "Access token or password used for Docker registry authentication."
  docker_repo:
    required: true
    description: "Target Docker registry repository or namespace to push the built image."
  slack:
    required: true
    description: "Incoming Slack Webhook URL used to send delivery status notifications."

runs:
  using: composite
  steps:
    # ==========================================================
    # üßæ STEP 1: Validate and Parse
    # Ensures only tags like "<image>-X.Y.Z" trigger delivery.
    # ==========================================================
    - name: üîç Validate Branch & Parse Tag
      id: parse
      shell: bash
      run: |
        BRANCH="${GITHUB_REF_NAME}"
        TAG="${GITHUB_REF#refs/tags/}"
        if [[ ! "$BRANCH" =~ ^release/ ]]; then
          echo "‚ùå Branch '$BRANCH' is NOT ALLOWED for CD (Delivery)."
          exit 1
        fi
        if [[ ! "$TAG" =~ ^([a-z0-9\-]+)-([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          echo "‚ùå Invalid tag format. Expected: <image>-X.Y.Z (e.g. auth-service-1.2.3)"
          exit 1
        fi
        IMAGE="${BASH_REMATCH[1]}"
        VERSION="${BASH_REMATCH[2]}"
        echo "‚úÖ Tag validation passed"
        echo "üîπ Extracted IMAGE: $IMAGE"
        echo "üîπ Extracted VERSION: $VERSION"
        echo "image=$IMAGE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    # ==========================================================
    # üèóÔ∏è STEP 2: Build Docker image
    # Builds the Docker image using its module directory.
    # ==========================================================
    - name: üèóÔ∏è Build Docker Image
      shell: bash
      run: |
        IMAGE_NAME="${{ inputs.docker_repo }}/${{ steps.parse.outputs.image }}:${{ steps.parse.outputs.version }}"
        PATH_DIR="${{ steps.parse.outputs.image }}"
        echo "Building image: $IMAGE_NAME"
        docker build -t "$IMAGE_NAME" -f "$PATH_DIR/Dockerfile" "$PATH_DIR"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    # ==========================================================
    # üöÄ STEP 3: Push Docker image
    # Authenticates and pushes the image to the target registry.
    # ==========================================================
    - name: üöÄ Push Docker Image
      shell: bash
      run: |
        echo "${{ inputs.docker_token }}" | docker login -u "${{ inputs.docker_user }}" --password-stdin
        docker push "$IMAGE_NAME"

    # ==========================================================
    # üõ°Ô∏è STEP 4: Scan Docker image vulnerabilities
    # ==========================================================
    - name: üõ°Ô∏è Scan Docker Image (Trivy)
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        exit-code: 1

    # ==========================================================
    # üßæ STEP 5: Generate build report
    # ==========================================================
    - name: üßæ Generate Delivery Report
      shell: bash
      run: |
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_NAME")
        echo "DIGEST=$DIGEST" >> $GITHUB_ENV
        echo "‚úÖ Build completed for $IMAGE_NAME" > report.txt
        echo "üîë Digest: $DIGEST" >> report.txt

    # ==========================================================
    # üì¶ STEP 6: Upload delivery artifacts
    # ==========================================================
    - name: üì§ Upload Delivery Report
      uses: actions/upload-artifact@v4
      with:
        name: release-report-${{ steps.parse.outputs.image }}-${{ steps.parse.outputs.version }}
        path: report.txt

    # ==========================================================
    # üì£ STEP 7: Notify Slack channel
    # ==========================================================
    - name: üì£ Notify Slack (Delivery Complete)
      shell: bash
      env:
        WEBHOOK_URL: ${{ inputs.slack }}
      run: |
        MESSAGE="‚úÖ CD Delivery completed successfully for tag: $GITHUB_REF_NAME"
        MESSAGE="$MESSAGE\nüì¶ Image: ${{ steps.parse.outputs.image }}:${{ steps.parse.outputs.version }}"
        curl -X POST -H "Content-Type: application/json" \
          --data "{\"text\":\"$MESSAGE\"}" $WEBHOOK_URL
