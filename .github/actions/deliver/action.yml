description: |
  - Tag validation (only image-version tags like X.Y.Z allowed)
  - Docker image build and tagging
  - Image push to target registry
  - Security scan using Trivy
  - Report generation and artifact upload
  - Slack notification for delivery completion

inputs:
  scope:
    required: true
    description: "Gradle Task tier 1."
  module:
    required: true
    description: "Gradle Task tier 2 (belong to 'scope')."
  version:
    required: true
    description: "Docker Image version"
  docker_user:
    required: true
    description: "Username or service account used to authenticate to the Docker registry."
  docker_token:
    required: true
    description: "Access token or password used for Docker registry authentication."
  docker_repo:
    required: true
    description: "Target Docker registry repository or namespace to push the built image."
  slack:
    required: true
    description: "Incoming Slack Webhook URL used to send delivery status notifications."

runs:
  using: composite
  steps:
    # ==========================================================
    # 🏗️ STEP 1: Build Docker image
    # Builds the Docker image using its module directory.
    # ==========================================================
    - name: 🏗️ Build Docker Image
      shell: bash
      run: |
        IMAGE_NAME="${{ inputs.docker_repo }}/${{ inputs.scope }}/${{ inputs.module }}:${{ inputs.version }}"
        SCOPE="${{ inputs.scope }}"
        MODULE="${{ inputs.module }}"
        echo "🏗️ Building Docker image: $IMAGE_NAME"
        echo "📦 Scope: $SCOPE | Module: $MODULE"
        docker build \
          -t "$IMAGE_NAME" \
          -f ".docker/Dockerfile" \
          --build-arg SCOPE="$SCOPE" \
          --build-arg MODULE="$MODULE" \
          .
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

    # ==========================================================
    # 🚀 STEP 2: Push Docker image
    # Authenticates and pushes the image to the target registry.
    # ==========================================================
    - name: 🚀 Push Docker Image
      shell: bash
      run: |
        echo "${{ inputs.docker_token }}" | docker login -u "${{ inputs.docker_user }}" --password-stdin
        docker push "$IMAGE_NAME"

    # ==========================================================
    # 🛡️ STEP 3: Scan Docker image vulnerabilities
    # ==========================================================
    - name: 🛡️ Scan Docker Image (Trivy)
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        exit-code: 1

    # ==========================================================
    # 🧾 STEP 4: Generate build report
    # ==========================================================
    - name: 🧾 Generate Delivery Report
      shell: bash
      run: |
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_NAME")
        echo "DIGEST=$DIGEST" >> $GITHUB_ENV
        echo "✅ Build completed for $IMAGE_NAME" > report.txt
        echo "🔑 Digest: $DIGEST" >> report.txt

    # ==========================================================
    # 📦 STEP 5: Upload delivery artifacts
    # ==========================================================
    - name: 📤 Upload Delivery Report
      uses: actions/upload-artifact@v4
      with:
        name: release-report-${{ steps.parse.outputs.image }}-${{ steps.parse.outputs.version }}
        path: report.txt

    # ==========================================================
    # 📣 STEP 6: Notify Slack channel
    # ==========================================================
    - name: 📣 Notify Slack (Delivery Complete)
      shell: bash
      env:
        WEBHOOK_URL: ${{ inputs.slack }}
      run: |
        MESSAGE="✅ CD Delivery completed successfully for tag: $GITHUB_REF_NAME"
        MESSAGE="$MESSAGE\n📦 Image: ${{ steps.parse.outputs.image }}:${{ steps.parse.outputs.version }}"
        curl -X POST -H "Content-Type: application/json" \
          --data "{\"text\":\"$MESSAGE\"}" $WEBHOOK_URL
