description: |
  - Branch validation
  - Dependency caching
  - Static & Security analysis
  - Testing & Building
  - Artifact upload
  - Aggregate validation
  - Image pre-build & vulnerability scan

inputs:
  scope:
    description: "Gradle Task tier 1"
    required: true
  module:
    description: "Gradle Task tier 2 (belong to 'scope')"
    required: true

runs:
  using: composite
  steps:
    # ==========================================================
    # 🧭 STEP 1: Validate branch naming convention
    # Ensures that only allowed branches (main, release/*, feature/*, bugfix/*)
    # can trigger CI to maintain consistent workflow rules.
    # ==========================================================
    - name: 🔍 Validate Branch Naming
      shell: bash
      run: |
        BRANCH="${GITHUB_REF#refs/heads/}"
        if [[ ! "$BRANCH" =~ ^(main|release/.*|feature/.*|bugfix/.*)$ ]]; then
          echo "❌ Branch '$BRANCH' is NOT ALLOWED for CI (DEVELOPMENT)."
          exit 1
        fi
        echo "✅ Branch validation passed for $BRANCH"

    # ==========================================================
    # ☕ STEP 2: Setup Java environment
    # Sets up Temurin JDK 25 for Gradle build and test execution.
    # ==========================================================
    - name: ⚙️ Setup Java 25 (Temurin)
      uses: actions/setup-java@v4
      with:
        java-version: '25'
        distribution: 'temurin'

    # ==========================================================
    # 🚀 STEP 3: Restore Gradle cache
    # Restores previously cached Gradle dependencies and wrapper
    # to speed up build times and reduce redundant downloads.
    # ==========================================================
    - name: 💾 Restore Gradle Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # ==========================================================
    # 🔍 STEP 4: Static code analysis
    # Runs Gradle `check` task (includes lint, static analysis, etc.)
    # to detect style and potential issues early.
    # ==========================================================
    - name: 🧠 Static Code Analysis
      shell: bash
      run: ./gradlew :${{ inputs.scope }}:${{ inputs.module }}:check

    # ==========================================================
    # 🛡️ STEP 5: Dependency vulnerability scan
    # Uses Anchore to scan dependencies for known vulnerabilities.
    # Build will fail on findings with severity ≥ HIGH.
    # ==========================================================
    - name: 🧩 Dependency Security Scan
      uses: anchore/scan-action@v4
      with:
        path: ./${{ inputs.scope }}/${{ inputs.module }}
        fail-build: true
        severity-cutoff: high

    # ==========================================================
    # 🧪 STEP 6: Run tests and build module
    # Executes unit tests, integration tests, and generates coverage report.
    # ==========================================================
    - name: 🧪 Test, Build & Coverage
      shell: bash
      env:
        SPRING_PROFILES_ACTIVE: test
      run: ./gradlew :${{ inputs.scope }}:${{ inputs.module }}:clean build jacocoTestReport

    # ==========================================================
    # 📊 STEP 7: Upload test report artifact
    # Stores test result reports as GitHub Action artifacts for later review.
    # ==========================================================
    - name: 📤 Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.scope }}-${{ inputs.module }}-test-report
        path: ${{ inputs.scope }}/${{ inputs.module }}/build/reports/tests/test

    # ==========================================================
    # 📈 STEP 8: Upload code coverage report
    # Publishes generated JaCoCo coverage report as build artifact.
    # ==========================================================
    - name: 📤 Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.scope }}-${{ inputs.module }}-coverage-report
        path: ${{ inputs.scope }}/${{ inputs.module }}/build/reports/jacoco/test/html

    # ==========================================================
    # 🔄 STEP 9: Aggregate validation
    # Checks if the latest commit introduces relevant changes (excluding docs).
    # Skips heavy downstream jobs when no code changes are detected.
    # ==========================================================
    - name: 🔎 Aggregate Change Validation
      shell: bash
      run: |
        if git diff --quiet HEAD^ HEAD -- ':!**/README.md'; then
          echo "ℹ️ No significant changes detected."
        else
          echo "✅ Relevant changes detected, continuing."
        fi

    # ==========================================================
    # 🧱 STEP 10: Pre-build Docker image (build stage only)
    # Builds an intermediate image targeting the 'build' stage to validate
    # Dockerfile integrity and dependencies without producing the final artifact.
    # ==========================================================
    - name: 🐳 Pre-Build Docker Image
      shell: bash
      run: |
        docker build \
          --target build \
          -t ci-${{ inputs.scope }}-${{ inputs.module }}:prebuild \
          -f .docker/Dockerfile \
          --build-arg SCOPE="${{ inputs.scope }}" \
          --build-arg MODULE="${{ inputs.module }}" \
          .

    # ==========================================================
    # 🔬 STEP 11: Container image vulnerability scan
    # Scans the pre-built Docker image for OS and dependency vulnerabilities
    # using Trivy, failing on HIGH or CRITICAL findings.
    # ==========================================================
    - name: 🔬 Scan Docker Image (Trivy)
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ci-${{ inputs.scope }}-${{ inputs.module }}:prebuild
        severity: HIGH,CRITICAL
        ignore-unfixed: true
        exit-code: 1
