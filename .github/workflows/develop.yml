name: Develop

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  detect-changes:
    # ==========================================================
    # 🔍 JOB: Detect Changed Modules
    # Purpose:
    #   - Dynamically determines which modules in the repo were modified
    #     in the latest push or pull request targeting the `dev` branch.
    #
    # Conditional Logic:
    #   - The job only runs if the triggering actor is *not included* in
    #     `vars.EXCLUDE_DEVELOP_ACTORS`, allowing certain accounts to bypass CI.
    # ==========================================================
    if: >
      !contains(vars.EXCLUDE_DEVELOP_ACTORS, github.actor)
    runs-on: ubuntu-latest
    # ==========================================================
    # How it works:
    #   1. Reads `vars.MODULE_IMAGE`, a JSON array describing all modules, e.g.:
    #        [
    #          {"module": "auth", "image": "auth-service"},
    #          {"module": "payment", "image": "payment-service"}
    #        ]
    #
    #   2. Generates a temporary `filters.yml` file mapping each module to its folder:
    #        auth:
    #          - auth/**
    #        payment:
    #          - payment/**
    #
    #   3. Uses the `dorny/paths-filter` action to detect which module paths changed
    #      compared to the base branch (GitHub automatically provides the diff context).
    #
    #   4. If changes are found:
    #        → Builds a partial matrix containing only those modules (faster CI).
    #      If **no** changes are detected:
    #        → Falls back to include all modules (full CI mode).
    #
    #   5. Exports this JSON matrix via `GITHUB_OUTPUT`, so the next job (`develop`)
    #      can run each module’s CI pipeline independently in parallel.
    # ==========================================================
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: gen-filters
        run: |
          echo "filters:" > filters.yml
          jq -r '.[] | "  \(.module):\n    - \(.module)/**"' <<< '${{ vars.MODULE_IMAGE }}' >> filters.yml
          echo "::notice::Generated filters.yml:"
          cat filters.yml

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: ${{ hashFiles('filters.yml') }}
          filters-file: filters.yml

      - id: prepare
        run: |
          echo "::notice::Detected changes: ${{ steps.filter.outputs.changes }}"
          if [[ "${{ steps.filter.outputs.changes }}" != "[]" && -n "${{ steps.filter.outputs.changes }}" ]]; then
            echo "::notice::Partial CI mode for modules: ${{ steps.filter.outputs.changes }}"
            modules='${{ steps.filter.outputs.changes }}'
          else
            echo "::warning::No specific module changed → full CI triggered"
            modules=$(jq -c '[.[] | {module: .module}]' <<< '${{ vars.MODULE_IMAGE }}')
          fi
          echo "matrix=$modules" >> $GITHUB_OUTPUT
          echo "::notice::Matrix prepared → $modules"

      - if: always()
        run: |
          rm -f filters.yml
          echo "::notice::Cleaned up temporary filters.yml"

  develop:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: ./.github/actions/develop
        with:
          module: ${{ matrix.module }}
