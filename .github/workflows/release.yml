name: Release

on:
  schedule:
    - cron: "0 0 * * 1" # 0h UTC Monday Weekly
  workflow_dispatch:

jobs:
  resolve-version:
    # ==========================================================
    # üßÆ JOB: Resolve Next Release Versions
    # ----------------------------------------------------------
    # Purpose:
    #   1. Parse settings.gradle to detect buildable modules.
    #   2. A module is considered "buildable" if it‚Äôs a level-2 Gradle project:
    #         e.g. payment:gateway ‚Üí scope=payment, module=gateway
    #   3. Each buildable module corresponds to a Docker image:
    #         image = <scope>/<module>
    #   4. Query Docker Hub for its latest version tag (X.Y.Z),
    #      auto-increment patch (‚Üí X.Y.Z+1).
    #   5. Output a matrix:
    #         { scope, module, image, version }
    # ==========================================================
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        env:
          DOCKER_USER: ${{ vars.DOCKERHUB_USER }}
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKER_REPO: ${{ vars.DOCKERHUB_REPO }}
        run: |
          #!/bin/bash
          set -euo pipefail
          echo "üîç Parsing settings.gradle to detect buildable modules..."
          mapfile -t modules < <(grep -oE "'[a-z0-9:\-]+'" settings.gradle | tr -d "'" | sort)
          if [ ${#modules[@]} -eq 0 ]; then
            echo "‚ùå No modules found in settings.gradle"
            exit 1
          fi
          echo "üßæ All modules detected:"
          printf ' - %s\n' "${modules[@]}"
          mapfile -t buildable < <(printf '%s\n' "${modules[@]}" | grep -E '.+:.+')
          if [ ${#buildable[@]} -eq 0 ]; then
            echo "‚ùå No buildable (level-2) modules found."
            exit 1
          fi
          echo "üöÄ Buildable modules (to be built as Docker images):"
          printf ' - %s\n' "${buildable[@]}"
          versions='[]'
          for module in "${buildable[@]}"; do
            scope=$(echo "$module" | cut -d':' -f1)
            name=$(echo "$module" | cut -d':' -f2)
            image="$scope/$name"
            echo "üîç Checking latest tag for $image ..."
            latest=$(curl -s "https://hub.docker.com/v2/repositories/${DOCKER_REPO}/${image}/tags?page_size=1" \
              | jq -r '.results[0].name' || echo "0.0.0")
            if [[ -z "$latest" || "$latest" == "null" ]]; then
              latest="0.0.0"
            fi
            IFS='.' read -r major minor patch <<< "$latest"
            major=${major:-0}
            minor=${minor:-0}
            patch=${patch:-0}
            patch=$((patch + 1))
            if (( patch > 9 )); then
              patch=0; minor=$((minor + 1))
            fi
            if (( minor > 9 )); then
              minor=0; major=$((major + 1))
            fi
            next="$major.$minor.$patch"
            echo "üî¢ Next version for $image ‚Üí $next"
            versions=$(jq -c \
              --arg scope "$scope" \
              --arg module "$name" \
              --arg image "$image" \
              --arg version "$next" \
              '. + [{"scope":$scope,"module":$module,"image":$image,"version":$version}]' <<< "${versions:-[]}")
          done
          echo "‚úÖ Final release matrix:"
          echo "$versions" | jq .
          echo "matrix={\"include\":$versions}" >> $GITHUB_OUTPUT

  release:
    needs: resolve-version
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.resolve-version.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/release
        with:
          scope: ${{ matrix.scope }}
          module: ${{ matrix.module }}
          image: ${{ matrix.image }}
          version: ${{ matrix.version }}
