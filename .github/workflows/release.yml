name: Release

on:
  schedule:
    - cron: "0 0 * * 1" # 0h UTC Monday Weekly
  workflow_dispatch:

jobs:
  resolve-version:
    # ==========================================================
    # üßÆ JOB: Resolve Next Release Versions
    # Purpose:
    #   - Scan repository for Dockerfiles.
    #   - For each folder containing a Dockerfile:
    #       ‚Üí Treat folder name as image name.
    #       ‚Üí Query Docker Hub for latest version.
    #       ‚Üí Increment semantic version (patch).
    #   - Output version matrix for downstream release job.
    # ==========================================================
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        env:
          DOCKER_USER: ${{ vars.DOCKERHUB_USER }}
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKER_REPO: ${{ vars.DOCKERHUB_REPO }}
        run: |
          #!/bin/bash
          set -euo pipefail
          echo "üîç Scanning repository for Dockerfiles..."
          mapfile -t images < <(find . -type f -name 'Dockerfile' -printf '%h\n' | sed 's|^\./||' | sort)
          if [ ${#images[@]} -eq 0 ]; then
            echo "‚ùå No Dockerfiles found in repository."
            exit 1
          fi
          echo "üßæ Found Docker image directories:"
          printf ' - %s\n' "${images[@]}"
          versions='[]'
          for image in "${images[@]}"; do
            echo "üîç Checking latest version for $image ..."
            latest=$(curl -s "https://hub.docker.com/v2/repositories/${DOCKER_REPO}/${image}/tags?page_size=1" \
              | jq -r '.results[0].name' || echo "0.0.0")
            if [[ -z "$latest" || "$latest" == "null" ]]; then
              latest="0.0.0"
            fi
            echo "‚û°Ô∏è Found latest tag: $latest"
            IFS='.' read -r major minor patch <<< "$latest"
            major=${major:-0}
            minor=${minor:-0}
            patch=${patch:-0}
            patch=$((patch + 1))
            if (( patch > 9 )); then
              patch=0
              minor=$((minor + 1))
            fi
            if (( minor > 9 )); then
              minor=0
              major=$((major + 1))
            fi
            next="$major.$minor.$patch"
            echo "üî¢ Next version for $image ‚Üí $next"
            versions=$(jq -c --arg i "$image" --arg v "$next" \
              '. + [{"image":$i,"version":$v}]' <<< "${versions:-[]}")
          done
          echo "‚úÖ Final version matrix:"
          echo "$versions" | jq .
          echo "matrix={\"include\":$versions}" >> $GITHUB_OUTPUT

  release:
    needs: resolve-version
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.resolve-version.outputs.matrix) }}
    steps:
      - uses: ./.github/actions/release
        with:
          image: ${{ matrix.image }}
          version: ${{ matrix.version }}
