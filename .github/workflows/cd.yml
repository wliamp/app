name: CD Pipeline

on:
  push:
    branches:
      - 'releases/**'
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - 'releases/**'
    tags:
      - '*.*.*'

jobs:
  # ------------------------
  # detect changed services & prepare matrix
  # ------------------------
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            cmc:
              - 'communication/**'
            odr-cko:
              - 'order-lifecycle/checkout/**'
            odr-pay:
              - 'order-lifecycle/payment/**'

      - id: set-matrix
        run: |
          services=()

          if [[ "${{ steps.filter.outputs.cmc }}" == "true" ]]; then
            services+=('{"service":"cmc","context":"./communication","image":"wliamp/communication-service"}')
          fi
          if [[ "${{ steps.filter.outputs.odr-cko }}" == "true" ]]; then
            services+=('{"service":"odr-cko","context":"./order-lifecycle/checkout","image":"wliamp/checkout-service"}')
          fi
          if [[ "${{ steps.filter.outputs.odr-pay }}" == "true" ]]; then
            services+=('{"service":"odr-pay","context":"./order-lifecycle/payment","image":"wliamp/payment-service"}')
          fi

          echo "matrix=$(jq -c -n --argjson s "[${services[*]}]" '{include: $s}')" >> $GITHUB_OUTPUT

  # ------------------------
  # build & push Docker images
  # ------------------------
  build:
    needs: setup
    if: needs.setup.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/setup-buildx-action@v2

      - name: Extract version info
        id: extract_version
        run: |
          version=""
          if [[ "${GITHUB_REF}" == refs/heads/releases/* ]]; then
            version="${GITHUB_REF_NAME#releases/}"
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            version="${GITHUB_REF_NAME#v}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build & Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          push: true
          tags: |
            ${{ matrix.image }}:latest
            ${{ matrix.image }}:${{ github.sha }}
            ${{ steps.extract_version.outputs.version != '' && format('{0}:{1}', matrix.image, steps.extract_version.outputs.version) || '' }}

  # ------------------------
  # deploy to Kubernetes
  # ------------------------
  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config

      - name: Extract version
        id: extract_version
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF_NAME#releases/}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy service to Kubernetes
        run: |
          IMAGE=${{ matrix.image }}:${{ steps.extract_version.outputs.version }}
          echo "Deploying $IMAGE ..."

          kubectl set image deployment/${{ matrix.service }} \
            ${{ matrix.service }}=$IMAGE \
            -n production

          kubectl rollout status deployment/${{ matrix.service }} -n production
