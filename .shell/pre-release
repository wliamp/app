#!/bin/bash
set -euo pipefail
echo "🔍 Parsing settings.gradle to detect buildable scopes and services..."
mapfile -t modules < <(grep -oE "'[A-Za-z0-9:_\-]+'" settings.gradle | tr -d "'" | sort)
if [ ${#modules[@]} -eq 0 ]; then
  echo "❌ No modules found in settings.gradle"
  exit 1
fi
echo "🧾 All detected modules:"
printf ' - %s\n' "${modules[@]}"
mapfile -t buildable < <(printf '%s\n' "${modules[@]}" | grep -E '^[^:]+:[^:]+$')
if [ ${#buildable[@]} -eq 0 ]; then
  echo "❌ No buildable services (level-2 modules) found."
  exit 1
fi
echo "🚀 Buildable services (to be built as Docker images):"
printf ' - %s\n' "${buildable[@]}"
versions='[]'
for module_path in "${buildable[@]}"; do
  scope=$(echo "$module_path" | cut -d':' -f1)
  service=$(echo "$module_path" | cut -d':' -f2)
  image="$scope/$service"
  echo "🔍 Checking latest tag for $image ..."
  latest=$(curl -s -u "${DOCKER_USER}:${DOCKER_TOKEN}" \
    "https://hub.docker.com/v2/repositories/${DOCKER_REPO}/${image}/tags?page_size=1&ordering=last_updated" \
    | jq -r '.results[0].name // empty')
  latest=${latest:-0.0.0.0}
  IFS='.' read -r stable major minor patch <<< "$latest"
  stable=${stable:-0}
  major=${major:-0}
  minor=${minor:-0}
  patch=${patch:-0}
  patch=$((patch + 1))
  next="$stable.$major.$minor.$patch"
  echo "🔢 Next version for $image → $next"
  versions=$(jq -c \
    --arg scope "$scope" \
    --arg service "$service" \
    --arg image "$image" \
    --arg version "$next" \
    '. + [{"scope":$scope,"service":$service,"image":$image,"version":$version}]' <<< "${versions:-[]}")
done
echo "✅ Final release matrix:"
echo "$versions" | jq .
echo "matrix={\"include\":$(echo "$versions" | jq -c .)}" >> "$GITHUB_OUTPUT"
